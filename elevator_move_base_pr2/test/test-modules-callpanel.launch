<launch>

  <param name="use_sim_time" value="true"/>
  <include file="$(find pr2_machine)/sim.machine"/>
  <include file="$(find elevator_move_base_pr2)/launch/elevator_move_base_modules.xml" />

  <!-- inputs are tf, image_raw, camera_info, joint_states -->
  <node pkg="rosbag" type="play" name="rosbag_play"
        args="$(find elevator_move_base_pr2)/test/test-eng2-call-panel.bag -l -r 0.2 --clock" />

  <!-- image_raw, camera_info -> image_rect -->
  <!-- image_rect -> ImageFeature0D -->
  <group ns="/narrow_stereo/left" >
    <node pkg="image_proc" type="image_proc" name="image_proc">
      <param name="queue_size" value="100"/> <!-- image is throttled ?? -->
    </node>
    <node pkg="imagesift" type="imagesift" name="sift" >
      <remap from="image" to="image_rect" />
    </node>
  </group>

  <group ns="/wide_stereo/left" >
    <node pkg="image_proc" type="image_proc" name="image_proc"/>
  </group>

  <!-- test for panel pose detection -->
  <test test-name="panel_pose_detection" pkg="roseus" type="roseus"
	time-limit="300" args="$(find elevator_move_base_pr2)/test/test-panel-pose-detection.l"/>

  <!-- test for button color recognition -->
  <atest test-name="button_light" pkg="roseus" type="roseus" time-limit="300"
     args="$(find elevator_move_base_pr2)/test/test-button-light.l"/>

  <sphinxdoc><![CDATA[
This scripts is test for elevator call panel.

The bagfile contains these topics.
narrow_stereo/left/{camera_info,image_raw}, joint_states,, tf, view_point

Tests check equality of
narrow_stereo/left/{camera_info,image_raw} -> panel pose in /tf
tf, joint_states -> view_point
view_point, image_rect -> light_button

.. image:: build/images/call-panel-pose.mp4
  :width: 600

Then check the button color to detect the button was pushed.
The button area in the camera image is calcurated from Euslisp camera model and panel object model.

.. image:: build/images/call-panel-lighting.mp4
  :width: 600

.. image:: build/images/call-panel-lighting-not.mp4
  :width: 600

  ]]></sphinxdoc>

  <node type="rviz" pkg="rviz" name="rviz"
        args="--sync -d $(find elevator_move_base_pr2)/test/test-modules-callpanel.vcg"
        launch-prefix="glc-capture --start --out=$(find elevator_move_base_pr2)/build/test-modules-callpanel.glc" />

  <anode type="image_view2" pkg="image_view2" name="viewer1"
        launch-prefix='glc-capture --start --out=$(find elevator_move_base_pr2)/build/call-panel-pose.glc'>
    <remap from="image" to="/narrow_stereo/left/point_pose_extractor_elevator_call_panel/debug_image" />
  </anode>
  <anode type="image_view2" pkg="image_view2" name="viewer2"
        launch-prefix='glc-capture --start --out=$(find elevator_move_base_pr2)/build/test1-2.glc' >
    <remap from="image" to="/light_detector/debug_image" />
  </anode>

  <!-- we assume test code is invokde in alphabet order of test-name -->
  <test type="glc_encode.sh" pkg="jsk_tools" test-name="z_encode_test1" args="$(find elevator_move_base_pr2)/build/test-call-panel.glc -cxt 1 -o $(find elevator_move_base_pr2)/build/call-panel-pose.mp4" time-limit="300"/>
  <atest type="glc_encode.sh" pkg="jsk_tools" test-name="z_encode_test2" args="$(find elevator_move_base_pr2)/build/test-call-panel.glc -cxt 2 -o $(find elevator_move_base_pr2)/build/call-panel-lighting-not.mp4" time-limit="300"/>

</launch>
