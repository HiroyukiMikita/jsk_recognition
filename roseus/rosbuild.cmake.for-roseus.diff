*** rosbuild.cmake.org	2009-05-13 12:37:04.000000000 +0900
--- rosbuild.cmake	2009-05-13 12:36:53.000000000 +0900
***************
*** 444,449 ****
--- 444,463 ----
    endif (_rospack_failed)
    set(gensrv_oct_exe ${_rospack_invoke_result}/scripts/gensrv_oct)
    set(genmsg_oct_exe ${_rospack_invoke_result}/scripts/genmsg_oct)
+ 
+   execute_process(
+     COMMAND ${ROSPACK_EXE} find roseus
+     OUTPUT_VARIABLE _rospack_invoke_result
+     ERROR_VARIABLE _rospack_err_ignore
+     RESULT_VARIABLE _rospack_failed
+     OUTPUT_STRIP_TRAILING_WHITESPACE
+   )
+   if (_rospack_failed)
+     message(FATAL_ERROR "couldn't find roseus")
+   endif (_rospack_failed)
+   set(gensrv_eus_exe ${_rospack_invoke_result}/scripts/gensrv_eus)
+   set(genmsg_eus_exe ${_rospack_invoke_result}/scripts/genmsg_eus)
+ 
    #
    # Gather the gtest build flags, for use when building unit tests.  We
    # don't require the user to declare a dependency on gtest.
***************
*** 865,884 ****
        set(_output_lisp_package ${PROJECT_SOURCE_DIR}/srv/lisp/${PROJECT_NAME}/_package.lisp)
        set(_output_lisp_export ${PROJECT_SOURCE_DIR}/srv/lisp/${PROJECT_NAME}/_package_${_srv})
        set(_output_oct ${PROJECT_SOURCE_DIR}/srv/oct/${PROJECT_NAME}/${PROJECT_NAME}_${_srv})
  
        string(REPLACE ".srv" ".h" _output_cpp ${_output_cpp})
        string(REPLACE ".srv" ".py" _output_py ${_output_py})
        string(REPLACE ".srv" ".lisp" _output_lisp ${_output_lisp})
        string(REPLACE ".srv" ".lisp" _output_lisp_export ${_output_lisp_export})
        string(REPLACE ".srv" ".m" _output_oct ${_output_oct})
!   
        # Add the rule to build the .h and .py from the .srv
!       add_custom_command(OUTPUT ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${_output_lisp_export} ${_output_oct}
                           COMMAND ${gensrv_exe} ${_input}
!                          DEPENDS ${_input} ${gensrv_exe} ${gensrv_py_exe} ${gensrv_cpp_exe} ${gensrv_lisp_exe} ${gensrv_oct_exe} ${_srvlist} ${ROS_MANIFEST_LIST})
    
        # Add the generated .h to our list
!       list(APPEND _srv_headers ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${_output_lisp_export} ${_output_oct})
      endif(${_srv} MATCHES "^[^\\.].*\\.srv$")
    endforeach(_srv)
  
--- 879,900 ----
        set(_output_lisp_package ${PROJECT_SOURCE_DIR}/srv/lisp/${PROJECT_NAME}/_package.lisp)
        set(_output_lisp_export ${PROJECT_SOURCE_DIR}/srv/lisp/${PROJECT_NAME}/_package_${_srv})
        set(_output_oct ${PROJECT_SOURCE_DIR}/srv/oct/${PROJECT_NAME}/${PROJECT_NAME}_${_srv})
+       set(_output_eus ${PROJECT_SOURCE_DIR}/srv/eus/${PROJECT_NAME}/${PROJECT_NAME}_${_srv})
  
        string(REPLACE ".srv" ".h" _output_cpp ${_output_cpp})
        string(REPLACE ".srv" ".py" _output_py ${_output_py})
        string(REPLACE ".srv" ".lisp" _output_lisp ${_output_lisp})
        string(REPLACE ".srv" ".lisp" _output_lisp_export ${_output_lisp_export})
        string(REPLACE ".srv" ".m" _output_oct ${_output_oct})
!       string(REPLACE ".srv" ".l" _output_eus ${_output_eus})  
! 
        # Add the rule to build the .h and .py from the .srv
!       add_custom_command(OUTPUT ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${_output_lisp_export} ${_output_oct} ${_output_eus}
                           COMMAND ${gensrv_exe} ${_input}
!                          DEPENDS ${_input} ${gensrv_exe} ${gensrv_py_exe} ${gensrv_cpp_exe} ${gensrv_lisp_exe} ${gensrv_oct_exe} ${gensrv_eus_exe} ${_srvlist} ${ROS_MANIFEST_LIST})
    
        # Add the generated .h to our list
!       list(APPEND _srv_headers ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${_output_lisp_export} ${_output_oct} ${_output_eus})
      endif(${_srv} MATCHES "^[^\\.].*\\.srv$")
    endforeach(_srv)
  
***************
*** 924,943 ****
        set(_output_lisp_export ${PROJECT_SOURCE_DIR}/msg/lisp/${PROJECT_NAME}/_package_${_msg})
        set(_output_py ${PROJECT_SOURCE_DIR}/src/${PROJECT_NAME}/msg/_${_msg})
        set(_output_oct ${PROJECT_SOURCE_DIR}/msg/oct/${PROJECT_NAME}/${PROJECT_NAME}_${_msg})
    
        string(REPLACE ".msg" ".h" _output_cpp ${_output_cpp})
        string(REPLACE ".msg" ".lisp" _output_lisp ${_output_lisp})
        string(REPLACE ".msg" ".lisp" _output_lisp_export ${_output_lisp_export})
        string(REPLACE ".msg" ".py" _output_py ${_output_py})
        string(REPLACE ".msg" ".m" _output_oct ${_output_oct})
  
        # Add the rule to build the .h and .py from the .msg
!       add_custom_command(OUTPUT ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${_output_oct} ${_output_lisp_export}
                           COMMAND ${genmsg_exe} ${_input}
!                          DEPENDS ${_input} ${genmsg_exe} ${genmsg_py_exe} ${genmsg_cpp_exe} ${genmsg_lisp_exe} ${genmsg_oct_exe} ${_msglist} ${ROS_MANIFEST_LIST})
    
        # Add the generated .h to our list
!       list(APPEND _msg_headers ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${output_oct} ${_output_lisp_export})
      endif(${_msg} MATCHES "^[^\\.].*\\.msg$")
    endforeach(_msg)
  
--- 940,961 ----
        set(_output_lisp_export ${PROJECT_SOURCE_DIR}/msg/lisp/${PROJECT_NAME}/_package_${_msg})
        set(_output_py ${PROJECT_SOURCE_DIR}/src/${PROJECT_NAME}/msg/_${_msg})
        set(_output_oct ${PROJECT_SOURCE_DIR}/msg/oct/${PROJECT_NAME}/${PROJECT_NAME}_${_msg})
+       set(_output_eus ${PROJECT_SOURCE_DIR}/msg/eus/${PROJECT_NAME}/${PROJECT_NAME}_${_msg})
    
        string(REPLACE ".msg" ".h" _output_cpp ${_output_cpp})
        string(REPLACE ".msg" ".lisp" _output_lisp ${_output_lisp})
        string(REPLACE ".msg" ".lisp" _output_lisp_export ${_output_lisp_export})
        string(REPLACE ".msg" ".py" _output_py ${_output_py})
        string(REPLACE ".msg" ".m" _output_oct ${_output_oct})
+       string(REPLACE ".msg" ".l" _output_eus ${_output_eus})
  
        # Add the rule to build the .h and .py from the .msg
!       add_custom_command(OUTPUT ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${_output_oct} ${_output_eus} ${_output_lisp_export}
                           COMMAND ${genmsg_exe} ${_input}
!                          DEPENDS ${_input} ${genmsg_exe} ${genmsg_py_exe} ${genmsg_cpp_exe} ${genmsg_lisp_exe} ${genmsg_oct_exe} ${genmsg_eus_exe} ${_msglist} ${ROS_MANIFEST_LIST})
    
        # Add the generated .h to our list
!       list(APPEND _msg_headers ${_output_cpp} ${_output_py} ${_output_lisp} ${_output_lisp_package} ${output_oct} ${output_eus} ${_output_lisp_export})
      endif(${_msg} MATCHES "^[^\\.].*\\.msg$")
    endforeach(_msg)
  
