Index: include/pr2_teleop_general/pr2_teleop_general_commander.h
===================================================================
--- include/pr2_teleop_general/pr2_teleop_general_commander.h	(リビジョン 50668)
+++ include/pr2_teleop_general/pr2_teleop_general_commander.h	(作業コピー)
@@ -130,8 +130,8 @@
 
   void updateCurrentWristPositions();
 
-  void sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_yaw_vel, 
-                          double l_x_vel, double l_y_vel, double l_z_vel, double l_yaw_vel,
+  void sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_roll_vel, double r_pitch_vel, double r_yaw_vel,
+                          double l_x_vel, double l_y_vel, double l_z_vel, double l_roll_vel, double l_pitch_vel, double l_yaw_vel,
                           double hz);
 
   bool moveToWalkAlongArmPose();
Index: manifest.xml
===================================================================
--- manifest.xml	(リビジョン 50668)
+++ manifest.xml	(作業コピー)
@@ -19,6 +19,7 @@
   <depend package="pr2_controller_manager" />
   <depend package="pr2_mechanism_msgs" />
   <depend package="kinematics_msgs" />
+  <depend package="angles" />
   <depend package="urdf" />
   <depend package="ps3joy" />
   <depend package="pr2_common_action_msgs" />
Index: src/pr2_teleop_general_joystick.cpp
===================================================================
--- src/pr2_teleop_general_joystick.cpp	(リビジョン 50668)
+++ src/pr2_teleop_general_joystick.cpp	(作業コピー)
@@ -63,6 +63,7 @@
 static const unsigned int OPEN_GRIPPER_BUTTON = 15;
 static const unsigned int CLOSE_GRIPPER_BUTTON = 13;
 static const unsigned int ARM_MODE_TOGGLE_BUTTON = 4;
+static const unsigned int ARM_POSE_BUTTON = 2;
 
 static const unsigned int LEFT_AXIS_NUMBER = 1;
 static const unsigned int RIGHT_AXIS_NUMBER = 1;
@@ -132,6 +133,9 @@
     n_local.param("arm_y_scale", arm_y_scale_, .15);
     n_local.param("arm_z_scale", arm_z_scale_, .15);
 
+    n_local.param("arm_roll_scale", arm_roll_scale_, .50);
+    n_local.param("arm_pitch_scale", arm_pitch_scale_, .50);
+
     n_local.param("wrist_velocity",wrist_velocity_, 4.5);
 
     n_local.param("walk_along_x_speed_scale", walk_along_x_speed_scale_, 9.0);
@@ -280,6 +284,10 @@
 	left_arm_vx_ = 0.0;
 	left_arm_vy_ = 0.0;
 	left_arm_vz_ = 0.0;
+	right_arm_vel_roll_ = 0.0;
+	right_arm_vel_pitch_ = 0.0;
+	left_arm_vel_roll_ = 0.0;
+	left_arm_vel_pitch_ = 0.0;
 	in_walk_along = true;
       }
     }
@@ -464,6 +472,7 @@
         bool lookAnalog = false;
         bool rotClock = buttonOkAndOn(WRIST_CLOCKWISE_BUTTON, joy_msg);
         bool rotCounter = buttonOkAndOn(WRIST_COUNTER_BUTTON, joy_msg);
+	bool rotateArm = buttonOkAndOn(ARM_POSE_BUTTON, joy_msg);
         if(rotClock && !rotCounter) {
           des_right_wrist_vel_ = wrist_velocity_;
         } else if(!rotClock && rotCounter) {
@@ -476,14 +485,22 @@
         if(lookAnalog) {
           //look at analog sticks if we aren't supposed to wrist rotate
           if(axisOk(ARM_X_AXIS, joy_msg)) {
-            right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    if(rotateArm)
+	      right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    else
+	      right_arm_vel_roll_ = joy_msg->axes[ARM_X_AXIS]*arm_roll_scale_;
           } else {
             right_arm_vx_ = 0.0;
+            right_arm_vel_roll_ = 0.0;
           }
           if(axisOk(ARM_Y_AXIS, joy_msg)) {
-            right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    if(rotateArm)
+	      right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    else
+	      right_arm_vel_pitch_ = joy_msg->axes[ARM_Y_AXIS]*arm_pitch_scale_;
           } else {
             right_arm_vy_ = 0.0;
+            right_arm_vel_pitch_ = 0.0;
           }
           if(axisOk(ARM_Z_AXIS, joy_msg)) {
             right_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
@@ -495,6 +512,8 @@
           right_arm_vx_ = 0.0;
           right_arm_vy_ = 0.0;
           right_arm_vz_ = 0.0;
+	  right_arm_vel_roll_ = 0.0;
+	  right_arm_vel_pitch_ = 0.0;
         }
       }
     } else if (layout != LAYOUT_BOTH_ARMS) {
@@ -502,6 +521,8 @@
       right_arm_vx_ = 0.0;
       right_arm_vy_ = 0.0;
       right_arm_vz_ = 0.0;
+      right_arm_vel_roll_ = 0.0;
+      right_arm_vel_pitch_ = 0.0;
     }
     if(layout == LAYOUT_LEFT_ARM) {
       if(buttonOkAndOn(ARM_MODE_TOGGLE_BUTTON, joy_msg) && !sameValueAsLast(ARM_MODE_TOGGLE_BUTTON, joy_msg, last_joy_)) {
@@ -536,6 +557,7 @@
         bool lookAnalog = false;
         bool rotClock = buttonOkAndOn(WRIST_CLOCKWISE_BUTTON, joy_msg);
         bool rotCounter = buttonOkAndOn(WRIST_COUNTER_BUTTON, joy_msg);
+	bool rotateArm = buttonOkAndOn(ARM_POSE_BUTTON, joy_msg);
         if(rotClock && !rotCounter) {
           des_left_wrist_vel_ = wrist_velocity_;
         } else if(!rotClock && rotCounter) {
@@ -548,14 +570,22 @@
         if(lookAnalog) {
           //look at analog sticks if we aren't supposed to wrist rotate
           if(axisOk(ARM_X_AXIS, joy_msg)) {
-            left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    if(rotateArm)
+	      left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    else
+	      left_arm_vel_roll_ = joy_msg->axes[ARM_Y_AXIS]*arm_roll_scale_;
           } else {
             left_arm_vx_ = 0.0;
+            left_arm_vel_roll_ = 0.0;
           }
           if(axisOk(ARM_Y_AXIS, joy_msg)) {
-            left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    if(rotateArm)
+	      left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    else
+	      left_arm_vel_pitch_ = joy_msg->axes[ARM_Y_AXIS]*arm_pitch_scale_;
           } else {
             left_arm_vy_ = 0.0;
+            left_arm_vel_pitch_ = 0.0;
           }
           if(axisOk(ARM_Z_AXIS, joy_msg)) {
             left_arm_vz_ = joy_msg->axes[ARM_Z_AXIS]*arm_z_scale_;
@@ -567,6 +597,8 @@
           left_arm_vx_ = 0.0;
           left_arm_vy_ = 0.0;
           left_arm_vz_ = 0.0;
+	  left_arm_vel_roll_ = 0.0;
+	  left_arm_vel_pitch_ = 0.0;
         }
       }
     } else if (layout != LAYOUT_BOTH_ARMS) {
@@ -574,6 +606,8 @@
       left_arm_vx_ = 0.0;
       left_arm_vy_ = 0.0;
       left_arm_vz_ = 0.0;
+      left_arm_vel_roll_ = 0.0;
+      left_arm_vel_pitch_ = 0.0;
     }
     if(layout == LAYOUT_BOTH_ARMS) {
       if(buttonOkAndOn(ARM_MODE_TOGGLE_BUTTON, joy_msg) && !sameValueAsLast(ARM_MODE_TOGGLE_BUTTON, joy_msg, last_joy_)) {
@@ -612,6 +646,7 @@
         bool lookAnalog = false;
         bool rotClock = buttonOkAndOn(WRIST_CLOCKWISE_BUTTON, joy_msg);
         bool rotCounter = buttonOkAndOn(WRIST_COUNTER_BUTTON, joy_msg);
+        bool rotateArm = buttonOkAndOn(ARM_POSE_BUTTON, joy_msg);
         if(rotClock && !rotCounter) {
           des_left_wrist_vel_ = wrist_velocity_;
           des_right_wrist_vel_ = wrist_velocity_;
@@ -627,15 +662,25 @@
         if(lookAnalog) {
           //look at analog sticks if we aren't supposed to wrist rotate
           if(axisOk(ARM_X_AXIS, joy_msg)) {
-            left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
-            right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    if(rotateArm) {
+	      left_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	      right_arm_vx_ = joy_msg->axes[ARM_X_AXIS]*arm_x_scale_;
+	    } else {
+	      left_arm_vel_roll_ = joy_msg->axes[ARM_X_AXIS]*arm_roll_scale_;
+	      right_arm_vel_roll_ = joy_msg->axes[ARM_X_AXIS]*arm_roll_scale_;
+	    }
           } else {
             left_arm_vx_ = 0.0;
             right_arm_vz_ = 0.0;
           }
           if(axisOk(ARM_Y_AXIS, joy_msg)) {
-            left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
-            right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    if(rotateArm) {
+	      left_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	      right_arm_vy_ = joy_msg->axes[ARM_Y_AXIS]*arm_y_scale_;
+	    } else {
+	      left_arm_vel_pitch_ = joy_msg->axes[ARM_Y_AXIS]*arm_pitch_scale_;
+	      right_arm_vel_pitch_ = joy_msg->axes[ARM_Y_AXIS]*arm_pitch_scale_;
+	    }
           } else {
             left_arm_vy_ = 0.0;
             right_arm_vz_ = 0.0;
@@ -655,6 +700,10 @@
           right_arm_vx_ = 0.0;
           right_arm_vy_ = 0.0;
           right_arm_vz_ = 0.0;
+	  left_arm_vel_roll_ = 0.0;
+	  left_arm_vel_pitch_ = 0.0;
+	  right_arm_vel_roll_ = 0.0;
+	  right_arm_vel_pitch_ = 0.0;
         }
       }
     } else if (layout != LAYOUT_RIGHT_ARM && layout != LAYOUT_LEFT_ARM) {
@@ -666,6 +715,10 @@
       right_arm_vx_ = 0.0;
       right_arm_vy_ = 0.0;
       right_arm_vz_ = 0.0;
+      left_arm_vel_roll_ = 0.0;
+      left_arm_vel_pitch_ = 0.0;
+      right_arm_vel_roll_ = 0.0;
+      right_arm_vel_pitch_ = 0.0;
     }
 
     joy_deadman_ = ros::Time::now();
@@ -739,6 +792,8 @@
   double arm_x_scale_;
   double arm_y_scale_;
   double arm_z_scale_;
+  double arm_roll_scale_;
+  double arm_pitch_scale_;
 
   double right_arm_vx_;
   double right_arm_vy_;
@@ -748,6 +803,12 @@
   double left_arm_vy_;
   double left_arm_vz_;
 
+  double right_arm_vel_roll_;
+  double right_arm_vel_pitch_;
+
+  double left_arm_vel_roll_;
+  double left_arm_vel_pitch_;
+
   bool head_init_;
   bool torso_init_;
 
@@ -877,8 +938,8 @@
         //generaljoy.gc->updateCurrentWristPositions();
         generaljoy.gc->sendWristVelCommands(generaljoy.des_right_wrist_vel_, generaljoy.des_left_wrist_vel_, SlowHz);
         
-        generaljoy.gc->sendArmVelCommands(generaljoy.right_arm_vx_, generaljoy.right_arm_vy_, generaljoy.right_arm_vz_, 0.0,
-                                          generaljoy.left_arm_vx_, generaljoy.left_arm_vy_, generaljoy.left_arm_vz_, 0.0,
+        generaljoy.gc->sendArmVelCommands(generaljoy.right_arm_vx_, generaljoy.right_arm_vy_, generaljoy.right_arm_vz_, generaljoy.right_arm_vel_roll_, generaljoy.right_arm_vel_pitch_, 0.0,
+                                          generaljoy.left_arm_vx_, generaljoy.left_arm_vy_, generaljoy.left_arm_vz_, generaljoy.left_arm_vel_roll_, generaljoy.left_arm_vel_pitch_, 0.0,
                                           SlowHz);
       }
     }
Index: src/pr2_teleop_general_keyboard.cpp
===================================================================
--- src/pr2_teleop_general_keyboard.cpp	(リビジョン 50668)
+++ src/pr2_teleop_general_keyboard.cpp	(作業コピー)
@@ -460,91 +460,91 @@
             break;
           case 'i':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             }
             break;
           case 'k':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,
-                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(-generalkey->arm_x_scale_,0.0,0.0,0.0,0.0,0.0,
+                                             -generalkey->arm_x_scale_, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             }
             break;
           case 'j':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             0.0,generalkey->arm_y_scale_,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             0.0,generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,
-                                                 0.0,generalkey->arm_y_scale_, 0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                                 0.0,generalkey->arm_y_scale_, 0.0,0.0,0.0,0.0,
                                                  20.0);
             }
             break;
           case 'l':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                             0.0,-generalkey->arm_y_scale_,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                             0.0,-generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
                                              20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,
-                                             0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                             0.0, 0.0,0.0,0.0,0.0,0.0,
                                              20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,
-                                                 0.0,-generalkey->arm_y_scale_, 0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,-generalkey->arm_y_scale_,0.0,0.0,0.0,0.0,
+                                                 0.0,-generalkey->arm_y_scale_, 0.0,0.0,0.0,0.0,
                                                  20.0);
             }
             break;
           case 'h':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                                 0.0,0.0,generalkey->arm_z_scale_,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                                 0.0,0.0,generalkey->arm_z_scale_,0.0,0.0,0.0,
                                                  20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,
-                                                 0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0, 0.0,0.0,0.0,0.0,0.0,
                                                  20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,
-                                                 0.0,0.0,generalkey->arm_z_scale_, 0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0,0.0,generalkey->arm_z_scale_, 0.0,0.0,0.0,
                                                  20.0);
             }
             break;
           case 'n':
             if(arm == GeneralCommander::ARMS_LEFT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,
-                                                 0.0,0.0,-generalkey->arm_z_scale_,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,0.0,0.0,0.0,0.0,
+                                                 0.0,0.0,-generalkey->arm_z_scale_,0.0,0.0,0.0,
                                                  20.0);
             } else if(arm == GeneralCommander::ARMS_RIGHT) {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,
-                                                 0.0, 0.0,0.0,0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0, 0.0,0.0,0.0,0.0,0.0,
                                                  20.0);
             } else {
-              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,
-                                                 0.0,0.0,-generalkey->arm_z_scale_, 0.0,
+              generalkey->gc->sendArmVelCommands(0.0,0.0,-generalkey->arm_z_scale_,0.0,0.0,0.0,
+                                                 0.0,0.0,-generalkey->arm_z_scale_, 0.0,0.0,0.0,
                                                  20.0);
             }
             break;
Index: src/pr2_teleop_general_commander.cpp
===================================================================
--- src/pr2_teleop_general_commander.cpp	(リビジョン 50668)
+++ src/pr2_teleop_general_commander.cpp	(作業コピー)
@@ -32,6 +32,7 @@
 
 #include <string>
 #include <boost/bind.hpp>
+#include <LinearMath/btQuaternion.h>
 
 #include <pr2_mechanism_msgs/SwitchController.h>
 #include <geometry_msgs/Twist.h>
@@ -880,8 +881,8 @@
   traj = unnormalized_trajectory; 
 }
 
-void GeneralCommander::sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_yaw_vel, 
-                                        double l_x_vel, double l_y_vel, double l_z_vel, double l_yaw_vel,
+void GeneralCommander::sendArmVelCommands(double r_x_vel, double r_y_vel, double r_z_vel, double r_roll_vel, double r_pitch_vel, double r_yaw_vel,
+					  double l_x_vel, double l_y_vel, double l_z_vel, double l_roll_vel, double l_pitch_vel, double l_yaw_vel,
                                         double hz) {
 
 
@@ -895,7 +896,8 @@
 
   if(control_rarm_) {
     
-    if(fabs(r_x_vel) > .001 || fabs(r_y_vel) > .001 || fabs(r_z_vel) > .001) {
+    if(fabs(r_x_vel) > .001 || fabs(r_y_vel) > .001 || fabs(r_z_vel) > .001 ||
+       fabs(r_roll_vel) > .001 || fabs(r_pitch_vel) > .001) {
       
       geometry_msgs::Pose right_trajectory_endpoint = des_r_wrist_roll_pose_;
       
@@ -907,16 +909,38 @@
       double pos_diff_x = r_x_vel*(1.0/hz);//*look_ahead;
       double pos_diff_y = r_y_vel*(1.0/hz);//*look_ahead;
       double pos_diff_z = r_z_vel*(1.0/hz);//*look_ahead;
+      double pos_diff_roll = r_roll_vel*(1.0/hz);//*look_ahead;
+      double pos_diff_pitch = r_pitch_vel*(1.0/hz);//*look_ahead;
       //double pos_diff_yaw = r_yaw_vel;//*(1.0/hz);//*look_ahead;
       
       right_trajectory_endpoint.position.x += r_x_vel*trajectory_duration;
       right_trajectory_endpoint.position.y += r_y_vel*trajectory_duration;
       right_trajectory_endpoint.position.z += r_z_vel*trajectory_duration;
       
+      btQuaternion::btQuaternion base_quat(right_trajectory_endpoint.orientation.x,
+					   right_trajectory_endpoint.orientation.y,
+					   right_trajectory_endpoint.orientation.z,
+					   right_trajectory_endpoint.orientation.w);
+      btQuaternion ::btQuaternion endpoint_quat =
+	base_quat * btQuaternion::btQuaternion(0, r_roll_vel*trajectory_duration,
+				 r_roll_vel*trajectory_duration);
+      right_trajectory_endpoint.orientation.x = endpoint_quat.getAxis().getX();
+      right_trajectory_endpoint.orientation.y = endpoint_quat.getAxis().getY();
+      right_trajectory_endpoint.orientation.z = endpoint_quat.getAxis().getZ();
+      right_trajectory_endpoint.orientation.w = endpoint_quat.getW();
+      
       des_r_wrist_roll_pose_.position.x += pos_diff_x;
       des_r_wrist_roll_pose_.position.y += pos_diff_y;
       des_r_wrist_roll_pose_.position.z += pos_diff_z;
       
+      btQuaternion ::btQuaternion des_quat =
+	base_quat * btQuaternion::btQuaternion(0, pos_diff_roll, pos_diff_pitch);
+      des_r_wrist_roll_pose_.orientation.x = des_quat.getAxis().getX();
+      des_r_wrist_roll_pose_.orientation.y = des_quat.getAxis().getY();
+      des_r_wrist_roll_pose_.orientation.z = des_quat.getAxis().getZ();
+      des_r_wrist_roll_pose_.orientation.w = des_quat.getW();
+
+      
       //ROS_INFO_STREAM("Desired " << des_r_wrist_roll_pose_.position.x << " " << des_r_wrist_roll_pose_.position.y << " " << des_r_wrist_roll_pose_.position.z);
       
       //todo - figure out yaw
