;; (+ 2707 2707 2707) -> 8121
;; (+ 2707 2707 2707 2707 525) -> 11353
;; (+ 4050 3450 3450 3600) -> 14550
;; 2202
;(load "models/room73b1-scene.l")
(load "models/room73b2-scene.l")
;(load "models/room73a3-scene.l")
;;
(defun make-eng2-room (w1 w2 d &rest args &key (name) &allow-other-keys)
  (let* (b (s 50) (sd (if (> d 0) (- s) s)) k v)
    ;; w1 > 0, w2 < 0
    (setq b (make-prism (list (float-vector sd s 0)
			      (float-vector sd (- w1 s) 0)
			      (float-vector (- 0 d sd) (- w1 s) 0)
			      (float-vector (- 0 d sd) (- s w2) 0)
			      (float-vector sd (- s w2) 0)
			      (float-vector sd s 0)
			      )
			1.0 :name name))
    (print args)
    (while args
      (setq k (pop args) v (pop args))
      (setf (get b k) v))
    b))


(defun make-71-rooms ()
  (let ((a1 (make-eng2-room 0 (+ (* 1150 3) 600 250) 8121 :name "71a1"))
	(a2 (make-eng2-room 0 (* 1150 3) 8121 :name "71a2"))
	(a3 (make-eng2-room 0 (* 1150 3) 8121 :name "71a3"))
	(a4 (make-eng2-room 150 (* 1150 3) 8121 :name "71a4"))
	(b2 (make-eng2-room (+ (* 1150 4) 900) (+ (* 1150 3) 100 500 295) -11353 :name "71b2"))
	(c1 (make-eng2-room (* 1150 3) (+ (* 1150 3) 100 500 295) 11353 :name "71c1"))
	(c2 (make-eng2-room (+ (* 1150 3) 100) (* 1150 3) 11353 :name "71c2"))
	(d1 (make-eng2-room (* 1150 3) (+ 100 500 295) -8121 :name "71d1"))
	(d2 (make-eng2-room (* 1150 3) 0 -8121 :name "71d2"))
	(d3 (make-eng2-room (* 1150 3) 0 -8121 :name "71d3"))
	(d4 (make-eng2-room (+ (* 1150 3) 100) 0 -8121 :name "71d4"))
	)
    (setf (get b2 :face-color) :dodgerblue)
    (setf (get c2 :face-color) :dodgerblue)
    (setf (get a1 :face-color) :dodgerblue)
    (send d4 :locate (float-vector 0 (* 3 1150) 0))
    (send d3 :assoc d4)
    (send d3 :locate (float-vector 0 (* 3 1150) 0))
    (send d2 :assoc d3)
    (send d2 :locate (float-vector 0 (* 3 1150) 0))
    (send d1 :assoc d2)
    (send c2 :locate (float-vector 0 (* 6 1150) 0))
    (send c1 :assoc c2)
    (send d1 :locate (float-vector 0 (* -3 1150) 0))
    (send c1 :locate (float-vector -2020 0 0))
    (send c1 :assoc d1)

    (send a4 :locate (float-vector 0 (* 3 1150) 0))
    (send a3 :assoc a4)
    (send a3 :locate (float-vector 0 (* 3 1150) 0))
    (send a2 :assoc a3)
    (send a2 :locate (float-vector 0 (* 3 1150) 0))
    (send a1 :assoc a2)
    ;;
    (send b2 :locate (float-vector 2020 0 0))
    (send a1 :assoc b2)
    (send a1 :locate (float-vector 0 (- (+ (* 9 1150) 150)) 0))

    (send a1 :locate (float-vector -1010 0 0))
    ;;
    (send c1 :locate (float-vector 0 (* -9 1150) 0))
    ;(send a1 :locate (float-vector 0 -1010 0))
    (send c1 :locate (float-vector 1010 0 0))
    (send c1 :locate (float-vector (+ 33319 2020) 0 0))
    (send a1 :assoc c1)
    (list a1 a2 a3 a4 b2 c1 c2 d1 d2 d3 d4)))

(defun make-72-rooms ()
  (let ((a1 (make-eng2-room 0 (+ (* 1150 3) 150) 8121 :name "72a1"))
	(a2 (make-eng2-room 0 (* 1150 3) 8121 :name "72a2"))
	(a3 (make-eng2-room 0 (* 1150 3) 8121 :name "72a3"))
	(a4 (make-eng2-room 150 (+ (* 1150 3)) 8121 :name "72a4"))
	(b1 (make-eng2-room (* 1150 3) (+ (* 1150 3) 150) -11353 :name "72b1"))
	(b2 (make-eng2-room (+ (* 1150 3) 150) (* 1150 3) -11353 :name "72b2"))
	;;
	(c1 (make-eng2-room (* 1150 3) (+ (* 1150 3) 150) 11353 :name "72c1"))
	(c2 (make-eng2-room (+ (* 1150 3) 150) (* 1150 3) 11353 :name "72c2"))
	(d1 (make-eng2-room (* 1150 3) 150 -8121 :name "72d1"))
	(d2 (make-eng2-room (* 1150 3) 0 -8121 :name "72d2"))
	(d3 (make-eng2-room (* 1150 3) 0 -8121 :name "72d3"))
	(d4 (make-eng2-room (+ (* 1150 3) 150) 0 -8121 :name "72d4")))
    (setf (get b1 :face-color) :dodgerblue)
    (setf (get b2 :face-color) :dodgerblue)
    (setf (get d1 :face-color) :dodgerblue)
    (setf (get a1 :face-color) :dodgerblue)

    (send d4 :locate (float-vector 0 (* 3 1150) 0))
    (send d3 :assoc d4)
    (send d3 :locate (float-vector 0 (* 3 1150) 0))
    (send d2 :assoc d3)
    (send d2 :locate (float-vector 0 (* 3 1150) 0))
    (send d1 :assoc d2)
    (send d1 :locate (float-vector 0 150 0))
    ;;
    (send c2 :locate (float-vector 0 (* 6 1150) 0))
    (send c1 :assoc c2)
    (send c1 :locate (float-vector 0 (+ (* 3 1150) 150) 0))
    (send c1 :locate (float-vector -2020 0 0))
    (send c1 :assoc d1)

    (send b2 :locate (float-vector 0 (* 6 1150) 0))
    (send b1 :assoc b2)
    (send a4 :locate (float-vector 0 (* 3 1150) 0))
    (send a3 :assoc a4)
    (send a3 :locate (float-vector 0 (* 3 1150) 0))
    (send a2 :assoc a3)
    (send a2 :locate (float-vector 0 (* 3 1150) 0))
    (send a1 :assoc a2)
    (send a1 :locate (float-vector 0 (+ (* 3 1150) 150) 0))
    ;;
    (send b1 :locate (float-vector 0 (+ (* 3 1150) 150) 0))
    (send b1 :locate (float-vector 2020 0 0))
    (send a1 :assoc b1)

    (send a1 :locate (float-vector -1010 0 0))
    (send c1 :locate (float-vector 1010 0 0))
    (send c1 :locate (float-vector (+ 33319 2020) 0 0))
    (send a1 :assoc c1)

    (list a1 a2 a3 a4 b1 b2 c1 c2 d1 d2 d3 d4)))

(defun make-73-rooms ()
  (let ((a1 (make-eng2-room 0 (+ (* 1150 3) 150) 8121 :name "73a1" :people "Masayuki Inaba"))
	(a2 (make-eng2-room 0 (* 1150 3) 8121 :name "73a2" :people "kei Okada"))
	(a3 (make-eng2-room 0 (* 1150 3) 8121 :name "73a3"))
	(a4 (make-eng2-room (+ 100 500 295) (* 1150 3) 8121 :name "73a4"))
	(b1 (make-eng2-room (* 1150 3) (+ (* 1150 3) 150) -11353 :name "73b1"))
;	(b2 (make-eng2-room (+ (* 1150 3) 100 500 295) (* 1150 3) -11353 :name "73b2"))
	(b2 (room73b2))
	(c1 (make-eng2-room (* 1150 3) (+ (* 1150 3) 150) 11353 :name "73c1"))
	(c2 (make-eng2-room (+ (* 1150 3) 100 500 295) (* 1150 3) 11353 :name "73c2"))
	(d1 (make-eng2-room (* 1150 3) 150 -8121 :name "73d1"))
	(d2 (make-eng2-room (* 1150 3) 0 -8121 :name "73d2"))
	(d3 (make-eng2-room (* 1150 3) 0 -8121 :name "73d3"))
	(d4 (make-eng2-room (+ (* 1150 3) 100 500 295) 0 -8121 :name "73d4")))
    (setf (get a1 :face-color) :deeppink)
    (setf (get a2 :face-color) :lightpink)
    (setf (get a3 :face-color) :lawngreen)
    (setf (get a4 :face-color) :dodgerblue)
    (setf (get b1 :face-color) :darkviolet)
    (setf (get b2 :face-color) :dodgerblue)
    (setf (get d1 :face-color) :dodgerblue)
	(dolist (obj (send b2 :objects)) (send b2 :assoc obj))

    (send d4 :locate (float-vector 0 (* 3 1150) 0))
    (send d3 :assoc d4)
    (send d3 :locate (float-vector 0 (* 3 1150) 0))
    (send d2 :assoc d3)
    (send d2 :locate (float-vector 0 (* 3 1150) 0))
    (send d1 :assoc d2)
    (send d1 :locate (float-vector 0 150 0))
    ;;
    (send c2 :locate (float-vector 0 (* 6 1150) 0))
    (send c1 :assoc c2)
    (send c1 :locate (float-vector 0 (+ (* 3 1150) 150) 0))
    (send c1 :locate (float-vector -2020 0 0))
    (send c1 :assoc d1)

    (send b2 :locate (float-vector 0 (* 6 1150) 0))
    (send b1 :assoc b2)
    (send b1 :locate (float-vector 0 (+ (* 3 1150) 150) 0))
    (send a4 :locate (float-vector 0 (* 3 1150) 0))
    (send a3 :assoc a4)
    (send a3 :locate (float-vector 0 (* 3 1150) 0))
    (send a2 :assoc a3)
    (send a2 :locate (float-vector 0 (* 3 1150) 0))
    (send a1 :assoc a2)
    (send a1 :locate (float-vector 0 (+ (* 3 1150) 150) 0))

    (send b1 :locate (float-vector 2020 0 0))
    (send a1 :assoc b1)

    (send a1 :locate (float-vector -1010 0 0))
    (send c1 :locate (float-vector 1010 0 0))
    (send c1 :locate (float-vector (+ 33319 2020) 0 0))
    (send a1 :assoc c1)
    ;;
    (list a1 a2 a3 a4 b1 b2 c1 c2 d1 d2 d3 d4)))


(defun make-eng2-corridor (w l &key (pos (float-vector 0 0 0)) (rpy (float-vector 0 0 0)))
  (let (b)
    (setq b (make-prism (list (float-vector 0 0 0)
			      (float-vector 0 (/ w 2) 0)
			      (float-vector l (/ w 2) 0)
			      (float-vector l (/ w -2) 0)
			      (float-vector 0 (/ w -2) 0)
			      (float-vector 0 0 0))
			1 :name "corridor"))
    (send b :locate pos)
    (send b :rpy (elt rpy 0) (elt rpy 1) (elt rpy 2))
    (setf (get b :face-color) :orange)
    b))

(defun eng2-rooms ()
  (let (71rooms 72rooms 73rooms corridors 73b1 rooms)
	(setq 71rooms (make-71-rooms)
		  72rooms (make-72-rooms)
		  73rooms (make-73-rooms))
	(send (car 72rooms) :locate (float-vector 0 (- (+ 1500 445 2710 445 1500   3600 3450 3450 3600)) 0))
	(send (car 71rooms) :locate (float-vector 0 (- (+ 1500 445 2710 445 1500   3600 3450 3450 3600   1500 445 2710 445 1500)) 0))

	(setq corridors
		  (list (make-eng2-corridor 2000 14800 :pos (float-vector 0 0 0) :rpy (float-vector pi/2 0 0))
				(make-eng2-corridor 2000 -14100 :pos (float-vector 0 (- (+ 1500 445 2710 445 1500)) 0) :rpy (float-vector pi/2 0 0))
				(make-eng2-corridor 2000 -14800 :pos (float-vector 0 (- (+ 1500 445 2710 445 1500  14100 1500 445 2710 445 1500)) 0) :rpy (float-vector pi/2 0 0))
				(make-eng2-corridor 2700 33319 :pos (float-vector 1010 (- (+ 1500 445 (/ 2710 2))) 0))
				(make-eng2-corridor 2000 14800 :pos (float-vector (+ 2020 33319) 0 0) :rpy (float-vector pi/2 0 0))
				(make-eng2-corridor 2000 -14100 :pos (float-vector (+ 2020 33319) (- (+ 1500 445 2710 445 1500)) 0) :rpy (float-vector pi/2 0 0))
				(make-eng2-corridor 2000 -14800 :pos (float-vector (+ 2020 33319) (- (+ 1500 445 2710 445 1500  14100 1500 445 2710 445 1500)) 0) :rpy (float-vector pi/2 0 0))
				(make-eng2-corridor 2700 33319 :pos (float-vector 1010 (- (+ 14800 (* 2 (+ 2710 1500 445)))) 0))
				))
	(setq rooms (append 71rooms 72rooms 73rooms corridors))

	(setq 73b1 (find "73b1" rooms
					 :test #'string= :key #'(lambda(x)(send x :name))))
	(dolist (rm rooms)
	  (when (not (eq rm 73b1)) (send rm :dissoc 73b1) (send 73b1 :assoc rm))
	  (gl::transparent rm 0.3))
	rooms
	))
;;(objects rooms)
;; (dolist (r rooms)
;;   (format t "~A:~%" (get r :name))
;;   (format t "  pos -> ~A~%" (send r :pos))
;;   (format t "  rot -> ~A~%" (send r :rpy-angle))
;;   (if (get r :people)
;;       (format t "  people -> ~A~%" (get r :people))))
