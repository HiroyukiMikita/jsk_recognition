(load "package://jsk_maps/src/plane-building-model.l")
(load "package://jsk_maps/euslisp/eng2-map.l")

(load "models/elevator_call_panel_eng2-object.l")
(load "models/elevator_inside_panel_eng2-object.l")

(load "eng2-rooms.l")

(defun make-eng2-scene ()
  (let* (scene (map (make-eng2-map-map)) floor-names spots)
	(setq floor-names
	      (mapcar #'(lambda(x)(send x :name)) (send map :descendants)))

	;; 2f
	(make-cascoords-tree
	 (find "/eng2/2f" (send map :descendants)
		   :test #'string= :key #'(lambda(x)(send x :name)))
	 '(:rot #2f((0.0 1.0 0.0) (-1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(3100.0 -31250.0 0.0)
			:name "/eng2/2f/elevator_call_panel-front")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))
			:pos #f(2100.0 -33700.0 0.0)
			:name "/eng2/2f/elevator_inside_panel-front")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(2000.0 -31000.0 0.0)
			:name "/eng2/2f/elevator-outside")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 0.0 -1.0) (0.0 1.0 0.0))
			:pos #f(23000.0 -7100.0 0.0)
			:name "/eng2/2f/subway-front")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 0.0 -1.0) (0.0 1.0 0.0))
			:pos #f(25700.0 -7100.0 0.0)
			:name "/eng2/2f/subway-register")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 0.0 -1.0) (0.0 1.0 0.0))
			:pos #f(25000.0 -9400.0 0.0)
			:name "/eng2/2f/subway-lunchset")
	 '(:pos #f(3200.0 -31950 920) :rpy #f(1.5706 0 0)
			:name "/eng2/2f/elevator_call_panel")
	 '(:pos #f(2900 -33750 1000) :rpy #f(3.1416 0 0)
			:name "/eng2/2f/elevator_inside_panel"))
	;; 3F
	(make-cascoords-tree
	 (find "/eng2/3f" (send map :descendants)
		   :test #'string= :key #'(lambda(x)(send x :name)))
	 '(:rot #2f((-1.0 0.0 0.0) (0.0 -1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-2950 -32650 0)
			:name "/eng2/3f/room-31A-front")
	 '(:rot #2f((0.0 1.0 0.0) (-1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(-7646 -32526 0)
			:name "/eng2/3f/room-31A-center")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(-8667 -35244 0)
			:name "/eng2/3f/room-31A-inaba-front")
	 '(:rot #2f((0.726141 0.68746 0.0) (-0.68746 0.726141 0.0) (0.0 0.0 1.0))
			:pos #f(-6128 -43994 0)
			:name "/eng2/3f/room-31A-inoue-front")
	 '(:rot #2f((-1.0 0.0 0.0) (0.0 -1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-2393 -28345 0)
			:name "/eng2/3f/cross-road")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-2590 -44905 0)
			:name "/eng2/3f/small-kitchen"))
	;; 7f
	(setq rooms (eng2-rooms))
	(let ((7f-o (find "/eng2/7f" (flatten (send map :inheritance))
						:test #'string= :key #'(lambda(x)(send x :name))))
		  (73b1 (find "73b1" rooms
					  :test #'string= :key #'(lambda(x)(send x :name)))))
	  (send 73b1 :move-to (send 7f-o :copy-worldcoords) :world)
	  ;;(send 73b1 :rotate pi/2 :z)
	  (dolist (rm rooms)
		(send rm :name (concatenate string "/eng2/7f/" (send rm :name)))
		(send 73b1 :dissoc rm) (send 7f-o :assoc rm))
	  )
	(make-cascoords-tree
	 (find "/eng2/7f" (send map :descendants)
	       :test #'string= :key #'(lambda(x)(send x :name)))
	 '(:rot #2f((0.0 1.0 0.0) (-1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(3100.0 -31250.0 0.0)
			:name "/eng2/7f/elevator_call_panel-front")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))
			:pos #f(2100.0 -33700.0 0.0)
			:name "/eng2/7f/elevator_inside_panel-front")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(2000.0 -31000.0 0.0)
			:name "/eng2/7f/elevator-outside")
	 '(:rot #2f((-1.0 0.0 0.0) (0.0 -1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-1500.0 9800.0 0.0)
			:name "/eng2/7f/room73A4-front")
	 '(:rot #2f((-1.0 0.0 0.0) (0.0 -1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-1150.0 6300.0 0.0)
			:name "/eng2/7f/room73A3-front")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(-3250.0 4900.0 0.0)
			:name "/eng2/7f/room73A3-base")
	 '(:rot #2f((-1.0 0.0 0.0) (0.0 -1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-1500.0 2900.0 0.0)
			:name "/eng2/7f/room73A2-front")
	 '(:rot #2f((-1.0 0.0 0.0) (0.0 -1.0 0.0) (0.0 0.0 1.0))
			:pos #f(-1500.0 -500.0 0.0)
			:name "/eng2/7f/room73A1-front")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(3700.0 8600.0 0.0)
			:name "/eng2/7f/room73B2-front-of-tv")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(3400.0 -26600.0 0.0)
			:name "/eng2/7f/combustible-trashbox-front")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(5000.0 -26600.0 0.0)
			:name "/eng2/7f/non-combustible-trashbox-front")
	 '(:rot #2f((0.96 0.26 0.0) (-0.26 0.96 0.0) (0.0 0.0 1.0))
			:pos #f(5000.0 -2400.0 0.0)
			:name "/eng2/7f/room73B1-nakanishi")
	 '(:rot #2f((0.52 0.92 0.0) (-0.92 0.52 0.0) (0.0 0.0 1.0))
			:pos #f(3300.0 -1900.0 0.0)
			:name "/eng2/7f/room73B1-kurotobi")
	 '(:rot #2f((0.0 1.0 0.0) (-1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(-5500.0 4800.0 0.0)
			:name "/eng2/7f/room73A3-printer-front")
	 '(:pos #f(3200 -31950 920) :rpy #f(1.5706 0 0)
			:name "/eng2/7f/elevator_call_panel")
	 '(:pos #f(2900 -33750 1000) :rpy #f(3.1416 0 0)
			:name "/eng2/7f/elevator_inside_panel"))
	;; 8F
	(make-cascoords-tree
	 (find "/eng2/8f" (send map :descendants)
	       :test #'string= :key #'(lambda(x)(send x :name)))
	 '(:rot #2f((0.0 1.0 0.0) (-1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(3100.0 -31250.0 0.0)
			:name "/eng2/8f/elevator_call_panel-front")
	 '(:rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))
			:pos #f(2100.0 -33700.0 0.0)
			:name "/eng2/8f/elevator_inside_panel-front")
	 '(:rot #2f((0.0 -1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0))
			:pos #f(2000.0 -31000.0 0.0)
			:name "/eng2/8f/elevator-outside")
	 '(:pos #f(3200 -31950 920) :rpy #f(1.5706 0 0)
			:name "/eng2/8f/elevator_call_panel")
	 '(:pos #f(2900 -33750 1000) :rpy #f(3.1416 0 0)
			:name "/eng2/8f/elevator_inside_panel"))

	(setq scene
	      (instance
	       plane-building-model :init :name "/eng2"
	       :objects
	       (append
			(list
			 map
			 (elevator_call_panel_eng2 :name "elevator_call_panel")
			 (elevator_inside_panel_eng2 :name "elevator_inside_panel"))
			(flatten (send map :inheritance)))
	       ))

	;; scene -> map
	(send scene :assoc map)
	(send scene :floors floor-names) ;; set floor information

	;; visualize region
	(mapcar #'(lambda(x)(let ((obj (car (send scene :find-object (concatenate string x "/region")))))
						  (send obj :set-color #f(0 1 0 0.3))))
			floor-names)

	(dolist (obj (send scene :objects))
	  ;; first charactor of obj-name must be slash
	  (when (not (eq (char (send obj :name) 0) #\/))
	    (send obj :name (format nil "/~A" (send obj :name)))))
	scene))

;; example
;; (load "package://pr2eus/pr2-interface")
;; (ros::roseus "eng8_navigation")
;; (defvar *tfl* (instance ros::transform-listener :init))
;; (setq *ri* (instance pr2-interface :init))
;; (objects (list (setq *eng8-scene*  (make-eng8-scene))))
;; (move-to (car (send *eng8-scene* :find-object "/eng8/6f/room602-front")))
;;
;; debug
#|
(defun move-to-test (&optional (spot "/eng8/6f/room602-base"))
  (load "eng8-map-scene.l")
  (objects (list (setq *eng8-scene*  (make-eng8-scene))))
  (send *irtviewer* :look-all (make-cube 1000 1000 10000))
  (send (car (send *eng8-scene* :find-object spot)) :draw-on :flush t :size 1000 :color #f(1 0 0))
  (move-to (car (send *eng8-scene* :find-object spot)))
  )
|#
