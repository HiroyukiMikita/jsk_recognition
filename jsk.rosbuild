#!/usr/bin/env bash

function usage {
    echo >&2 "usage: $0"
    echo >&2 "          [-h|--help] print this message"
    echo >&2 "          [-i|--show-install] show how to install "
    echo >&2 "          [-p|--show-package] display packages to install"
    exit 0
}

function error {
    rosrun rosunit clean_junit_xml.py
    echo "source $ROS_WORKSPACE/setup.bash"
    exit 1
}
trap error ERR

# command line parse
OPT=`getopt -o hip -l help,show-install,show-package -- $*`
if [ $? != 0 ]; then
    usage
fi

eval set -- $OPT
while [ -n "$1" ] ; do
    case $1 in
	-h|--help) usage ;;
	-i|--show-install) SHOW="install"; shift;;
	-p|--show-package) SHOW="package"; shift;;
	--) shift; break;;
	*) echo "Unknown option($1)"; usage;;
    esac
done

# set environment variables
# set distribution
DISTRIBUTION=${@-"electric"}

# setup workspaceand buildspace
if [ "$WORKSPACE" == "" ]; then # if not jenkins
    export WORKSPACE=$HOME
fi
export ROS_INSTALLDIR=$WORKSPACE/ros/$DISTRIBUTION

# set environment variables
if [ -f /proc/xen -o "`grep -c 'QEMU Virtual CPU' /proc/cpuinfo`" != "0" ]; then
    export ROS_PARALLEL_JOBS=-j1
else
    export ROS_PARALLEL_JOBS=-j4
fi
export ROS_HOME=$WORKSPACE/.ros
unset SVN_REVISION ## this jenkins environment valiables conflicts with mk/svn_checkout.mk

# define functions
# http://www.ros.org/wiki/electric/Installation/Ubuntu
function setup-ros {
    sudo dpkg --configure -a
    sudo apt-get -y --force-yes install build-essential python-yaml cmake subversion wget python-setuptools git-core mercurial aptitude
    sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list'
    wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
    sudo apt-get update
    sudo apt-get upgrade -y --force-yes
    sudo apt-get -y --force-yes install python-setuptools
    sudo easy_install -U rosinstall vcstools rosdep
}

# see http://ros.org/reps/rep-0113.html for variants and http://www.ros.org/debbuild/ for build status
INSTALL_ROS_PACKAGE="ros-$DISTRIBUTION-wg-pr2-apps ros-$DISTRIBUTION-pr2-apps ros-$DISTRIBUTION-pr2-desktop ros-$DISTRIBUTION-openni-kinect ros-$DISTRIBUTION-audio-common ros-$DISTRIBUTION-turtlebot ros-$DISTRIBUTION-remote-lab"
function apt-get-ros-package {
    sudo apt-get -y --force-yes install $INSTALL_ROS_PACKAGE && return 0
    #
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-pr2-desktop/ros-$DISTRIBUTION-desktop-full ros-$DISTRIBUTION-pr2-base ros-$DISTRIBUTION-pr2-gui ros-$DISTRIBUTION-pr2-simulator ros-$DISTRIBUTION-pr2-power-drivers ros-$DISTRIBUTION-pr2-ethercat-drivers ros-$DISTRIBUTION-geometry-visualization}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-pr2-base/ros-$DISTRIBUTION-mobile ros-$DISTRIBUTION-perception ros-$DISTRIBUTION-move-arm ros-$DISTRIBUTION-control ros-$DISTRIBUTION-object-manipulation ros-$DISTRIBUTION-robot-calibration ros-$DISTRIBUTION-point-cloud-perception ros-$DISTRIBUTION-pr2-common ros-$DISTRIBUTION-pr2-controllers ros-$DISTRIBUTION-pr2-mechanism ros-$DISTRIBUTION-web-interface ros-$DISTRIBUTION-pr2-calibration ros-$DISTRIBUTION-pr2-navigation ros-$DISTRIBUTION-pr2-kinematics ros-$DISTRIBUTION-pr2-arm-navigation ros-$DISTRIBUTION-pr2-object-manipulation ros-$DISTRIBUTION-pr2-tabletop-manipulation-apps ros-$DISTRIBUTION-ros-realtime ros-$DISTRIBUTION-tabletop-object-perception ros-$DISTRIBUTION-sql-database ros-$DISTRIBUTION-geometry-experimental}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-desktop-full/ros-$DISTRIBUTION-desktop ros-$DISTRIBUTION-mobile ros-$DISTRIBUTION-perception ros-$DISTRIBUTION-simulators}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-desktop/ros-$DISTRIBUTION-ros-full ros-$DISTRIBUTION-robot ros-$DISTRIBUTION-viz ros-$DISTRIBUTION-ros-tutorials ros-$DISTRIBUTION-common-tutorials ros-$DISTRIBUTION-geometry-tutorials ros-$DISTRIBUTION-visualization-tutorials}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-perception/ros-$DISTRIBUTION-image-common ros-$DISTRIBUTION-image-transport-plugins ros-$DISTRIBUTION-image-pipeline ros-$DISTRIBUTION-vision-opencv}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-mobile/ros-$DISTRIBUTION-robot ros-$DISTRIBUTION-navigation ros-$DISTRIBUTION-slam-gmapping ros-$DISTRIBUTION-laser-pipeline ros-$DISTRIBUTION-perception-pcl}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-move-arm/ros-$DISTRIBUTION-arm-navigation ros-$DISTRIBUTION-octomap-mapping ros-$DISTRIBUTION-physics-ode ros-$DISTRIBUTION-perception-pcl ros-$DISTRIBUTION-pr2-controllers ros-$DISTRIBUTION-control ros-$DISTRIBUTION-pr2-mechanism ros-$DISTRIBUTION-pr2-common}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-simulators/ros-$DISTRIBUTION-simulator-stage ros-$DISTRIBUTION-simulator-gazebo ros-$DISTRIBUTION-stage ros-$DISTRIBUTION-physics-ode}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-viz/ros-$DISTRIBUTION-visualization-common ros-$DISTRIBUTION-visualization ros-$DISTRIBUTION-rx ros-$DISTRIBUTION-image-common ros-$DISTRIBUTION-laser-pipeline ros-$DISTRIBUTION-executive-smach-visualization ros-$DISTRIBUTION-diagnostics-monitors ros-$DISTRIBUTION-geometry-visualization ros-$DISTRIBUTION-robot-model-visualization ros-$DISTRIBUTION-geometry-experimental}
    INSTALL_ROS_PACKAGE=${INSTALL_ROS_PACKAGE/ros-$DISTRIBUTION-robot/ros-$DISTRIBUTION-ros-base ros-$DISTRIBUTION-bond-core ros-$DISTRIBUTION-common-msgs ros-$DISTRIBUTION-common ros-$DISTRIBUTION-diagnostics ros-$DISTRIBUTION-driver-common ros-$DISTRIBUTION-eigen ros-$DISTRIBUTION-filters ros-$DISTRIBUTION-bullet ros-$DISTRIBUTION-geometry ros-$DISTRIBUTION-nodelet-core ros-$DISTRIBUTION-orocos-kinematics-dynamics ros-$DISTRIBUTION-pluginlib ros-$DISTRIBUTION-assimp ros-$DISTRIBUTION-robot-model ros-$DISTRIBUTION-executive-smach ros-$DISTRIBUTION-xacro}
    INSTALL_ROS_PACKAGE=`echo $INSTALL_ROS_PACKAGE | tac -s' '`
    for PACKAGE in $INSTALL_ROS_PACKAGE
    do
	echo "install $PACKAGE"
	sudo apt-get -y --force-yes install $PACKAGE
    done
    return 0
}

# jsk ros install (copy from http://code.google.com/p/rtm-ros-robotics/wiki/ROS_English)
function install-jsk-ros-pkg {
    /usr/local/bin/rosinstall --rosdep-yes --continue-on-error  --delete-changed-uris $ROS_INSTALLDIR /opt/ros/$DISTRIBUTION http://jsk-ros-pkg.svn.sourceforge.net/viewvc/jsk-ros-pkg/trunk/jsk.rosinstall
# source
    . $ROS_INSTALLDIR/setup.sh
    if [ "$DISTRIBUTION" == "fuerte" ]; then
	export PATH=$PATH:/usr/local/bin
	(sudo rosdep init; rosdep update; true) # only for rosdep 2
	export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$ROS_INSTALLDIR/mjpeg_server
	(cd $ROS_INSTALLDIR; svn co http://bosch-ros-pkg.svn.sourceforge.net/svnroot/bosch-ros-pkg/trunk/stacks/remote_lab/mjpeg_server mjpeg_server; cd mjpeg_server; patch -p0 <<EOF
Index: manifest.xml
===================================================================
--- manifest.xml (revision 1327)
+++ manifest.xml (working copy)
@@ -9,5 +9,5 @@
   <depend package="roslib"/>
   <depend package="cv_bridge"/>
   <depend package="image_transport"/>
-  <depend package="opencv2"/>
+  <rosdep name="opencv2"/>
 </package>
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt (revision 1327)
+++ CMakeLists.txt (working copy)
@@ -19,6 +19,8 @@
 rosbuild_add_boost_directories()
 
 # mjpeg_server
+find_package(OpenCV REQUIRED)
 rosbuild_add_executable(mjpeg_server src/mjpeg_server.cpp)
+target_link_libraries(mjpeg_server \${OpenCV_LIBS})
 
 rosbuild_link_boost(${PROJECT_NAME} thread)
\ No newline at end of file
EOF
 rosdep -y install mjpeg_server; rosmake)
    fi
}

function rosdep_and_rosmake {
    trap error ERR
    local package=$1
    rosdep install -y $package
    rosmake --profile -V --status-rate=0 $package
}

function compile-jsk-ros-pkg {
    trap error ERR
    # sometimes sourceforge returns error
    rospack profile
    (cd `rospack find euslisp`; svn up; svn up)

    # start rosdep_and_rosmake
    rosdep_and_rosmake pr2eus_openrave
    rosdep_and_rosmake elevator_move_base_pr2
}

function test-jsk-ros-pkg {
    trap error ERR
    # test
    export DISPLAY=:0.0
    export PATH=$PATH:`rospack find roseus`/bin
    rm -fr $ROS_WORKSPACE/../../.ros/test_results
    PACKAGES="euslisp roseus pr2eus euscollada pr2eus_openrave elevator_move_base_pr2"

    for PACKAGE in $PACKAGES
    do
	(cd `rospack find $PACKAGE`; make test)
    done

    # if there are xdisplay, generate doc and index doc
    if [ "`xdpyinfo > /dev/null || echo "fail"`" == "fail" ] ; then
	echo "Could not connect to Xserver, so exit without running launchdoc"
	return 0
    fi

    # doc
    mkdir -p $ROS_INSTALLDIR/doc
    SVN_REVISION=`LANGUAGE=C svn info $ROS_INSTALLDIR/jsk-ros-pkg | grep Revision`
    cat<<EOF > $ROS_INSTALLDIR/doc/index.rst
========================================
jsk-ros-pkg($SVN_REVISION) Test Results
========================================
EOF
    for PACKAGE in $PACKAGES
    do
	if [ -f `rospack find $PACKAGE`/index.rst ]; then
	    (cd $ROS_INSTALLDIR; rosrun rosdoc rosdoc $PACKAGE)
	    wkhtmltopdf $ROS_INSTALLDIR/doc/$PACKAGE/html/index.html $ROS_INSTALLDIR/doc/$PACKAGE.pdf
	    convert $ROS_INSTALLDIR/doc/$PACKAGE.pdf $ROS_INSTALLDIR/doc/$PACKAGE.png
	    cat <<EOF >> $ROS_INSTALLDIR/doc/index.rst
.. image:: $PACKAGE-0.png
   :width: 320
   :target: $PACKAGE/html/index.html

EOF
	fi
    done
    rst2html $ROS_INSTALLDIR/doc/index.rst $ROS_INSTALLDIR/doc/index.html
}

# show-* option
case "$SHOW" in
    install) declare -f setup-ros | awk '/^\ /{print $0}' | sed -e 's/^[ ]*//'; exit 0;;
    package) echo "sudo apt-get -y --force-yes install $INSTALL_ROS_PACKAGE" ; exit 0;;
esac

# main program
set -x

setup-ros
apt-get-ros-package
install-jsk-ros-pkg
compile-jsk-ros-pkg
test-jsk-ros-pkg
rosrun rosunit clean_junit_xml.py     # check error

